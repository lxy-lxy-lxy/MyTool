{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-spa-router/Router.svelte","../../node_modules/regexparam/dist/index.mjs","../../components/Home.svelte","../../components/NotFound.svelte","../../src/Data/VirtualList/components/utils.js","../../src/Data/VirtualList/components/VList.svelte","../../src/Data/VirtualList/VirtualList.svelte","../../src/Data/Raf/component/ImmutableTodo.svelte","../../src/Data/Raf/component/flash.js","../../src/Data/Raf/Raf.svelte","../../src/Scene/Keyword/index.svelte","../../routes.js","../../Layout/Layout.svelte","../../utility/utils.js","../../src/pages/Login.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","<script context=\"module\">\nimport {readable, writable, derived} from 'svelte/store'\nimport {tick} from 'svelte'\nimport {wrap as _wrap} from './wrap'\n\n/**\n * Wraps a component to add route pre-conditions.\n * @deprecated Use `wrap` from `svelte-spa-router/wrap` instead. This function will be removed in a later version.\n * \n * @param {SvelteComponent} component - Svelte component for the route\n * @param {object} [userData] - Optional object that will be passed to each `conditionsFailed` event\n * @param {...function(RouteDetail): boolean} conditions - Route pre-conditions to add, which will be executed in order\n * @returns {WrappedComponent} Wrapped component\n */\nexport function wrap(component, userData, ...conditions) {\n    // Use the new wrap method and show a deprecation warning\n    // eslint-disable-next-line no-console\n    console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading')\n    return _wrap({\n        component,\n        userData,\n        conditions\n    })\n}\n\n/**\n * @typedef {Object} Location\n * @property {string} location - Location (page/view), for example `/book`\n * @property {string} [querystring] - Querystring from the hash, as a string not parsed\n */\n/**\n * Returns the current location from the hash.\n *\n * @returns {Location} Location object\n * @private\n */\nfunction getLocation() {\n    const hashPosition = window.location.href.indexOf('#/')\n    let location = (hashPosition > -1) ? window.location.href.substr(hashPosition + 1) : '/'\n\n    // Check if there's a querystring\n    const qsPosition = location.indexOf('?')\n    let querystring = ''\n    if (qsPosition > -1) {\n        querystring = location.substr(qsPosition + 1)\n        location = location.substr(0, qsPosition)\n    }\n\n    return {location, querystring}\n}\n\n/**\n * Readable store that returns the current full location (incl. querystring)\n */\nexport const loc = readable(\n    null,\n    // eslint-disable-next-line prefer-arrow-callback\n    function start(set) {\n        set(getLocation())\n\n        const update = () => {\n            set(getLocation())\n        }\n        window.addEventListener('hashchange', update, false)\n\n        return function stop() {\n            window.removeEventListener('hashchange', update, false)\n        }\n    }\n)\n\n/**\n * Readable store that returns the current location\n */\nexport const location = derived(\n    loc,\n    ($loc) => $loc.location\n)\n\n/**\n * Readable store that returns the current querystring\n */\nexport const querystring = derived(\n    loc,\n    ($loc) => $loc.querystring\n)\n\n/**\n * Store that returns the currently-matched params.\n * Despite this being writable, consumers should not change the value of the store.\n * It is exported as a readable store only (in the typings file)\n */\nexport const params = writable(undefined)\n\n/**\n * Navigates to a new page programmatically.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function push(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    // Note: this will include scroll state in history even when restoreScrollState is false\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)      \n    window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location\n}\n\n/**\n * Navigates back in history (equivalent to pressing the browser's back button).\n * \n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function pop() {\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    window.history.back()\n}\n\n/**\n * Replaces the current page but without modifying the history stack.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function replace(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    const dest = (location.charAt(0) == '#' ? '' : '#') + location\n    try {\n        const newState = {\n            ...history.state\n        }\n        delete newState['__svelte_spa_router_scrollX']\n        delete newState['__svelte_spa_router_scrollY']\n        window.history.replaceState(newState, undefined, dest)\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Caught exception while replacing the current page. If you\\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.')\n    }\n\n    // The method above doesn't trigger the hashchange event, so let's do that manually\n    window.dispatchEvent(new Event('hashchange'))\n}\n\n/**\n * Dictionary with options for the link action.\n * @typedef {Object} LinkActionOpts\n * @property {string} href - A string to use in place of the link's href attribute. Using this allows for updating link's targets reactively.\n * @property {boolean} disabled - If true, link is disabled\n */\n\n/**\n * Svelte Action that enables a link element (`<a>`) to use our history management.\n *\n * For example:\n *\n * ````html\n * <a href=\"/books\" use:link>View books</a>\n * ````\n *\n * @param {HTMLElement} node - The target node (automatically set by Svelte). Must be an anchor tag (`<a>`) with a href attribute starting in `/`\n * @param {string|LinkActionOpts} opts - Options object. For legacy reasons, we support a string too which will be the value for opts.href\n */\nexport function link(node, opts) {\n    opts = linkOpts(opts)\n\n    // Only apply to <a> tags\n    if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {\n        throw Error('Action \"link\" can only be used with <a> tags')\n    }\n\n    updateLink(node, opts)\n\n    return {\n        update(updated) {\n            updated = linkOpts(updated)\n            updateLink(node, updated)\n        }\n    }\n}\n\n/**\n * Tries to restore the scroll state from the given history state.\n *\n * @param {{__svelte_spa_router_scrollX: number, __svelte_spa_router_scrollY: number}} [state] - The history state to restore from.\n */\nexport function restoreScroll(state) {\n    // If this exists, then this is a back navigation: restore the scroll position\n    if (state) {\n        window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY)\n    }\n    else {\n        // Otherwise this is a forward navigation: scroll to top\n        window.scrollTo(0, 0)\n    }\n}\n\n// Internal function used by the link function\nfunction updateLink(node, opts) {\n    let href = opts.href || node.getAttribute('href')\n\n    // Destination must start with '/' or '#/'\n    if (href && href.charAt(0) == '/') {\n        // Add # to the href attribute\n        href = '#' + href\n    }\n    else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {\n        throw Error('Invalid value for \"href\" attribute: ' + href)\n    }\n\n    node.setAttribute('href', href)\n    node.addEventListener('click', (event) => {\n        // Prevent default anchor onclick behaviour\n        event.preventDefault()\n        if (!opts.disabled) {\n            scrollstateHistoryHandler(event.currentTarget.getAttribute('href'))\n        }\n    })\n}\n\n// Internal function that ensures the argument of the link action is always an object\nfunction linkOpts(val) {\n    if (val && typeof val == 'string') {\n        return {\n            href: val\n        }\n    }\n    else {\n        return val || {}\n    }\n}\n\n/**\n * The handler attached to an anchor tag responsible for updating the\n * current history state with the current scroll state\n *\n * @param {string} href - Destination\n */\nfunction scrollstateHistoryHandler(href) {\n    // Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)\n    // This will force an update as desired, but this time our scroll state will be attached\n    window.location.hash = href\n}\n</script>\n\n{#if componentParams}\n    <svelte:component\n    this=\"{component}\"\n    params=\"{componentParams}\"\n    on:routeEvent\n    {...props}\n    />\n{:else}\n    <svelte:component\n    this=\"{component}\"\n    on:routeEvent\n    {...props}\n    />\n{/if}\n\n<script>\nimport {onDestroy, createEventDispatcher, afterUpdate} from 'svelte'\nimport {parse} from 'regexparam'\n\n/**\n * Dictionary of all routes, in the format `'/path': component`.\n *\n * For example:\n * ````js\n * import HomeRoute from './routes/HomeRoute.svelte'\n * import BooksRoute from './routes/BooksRoute.svelte'\n * import NotFoundRoute from './routes/NotFoundRoute.svelte'\n * routes = {\n *     '/': HomeRoute,\n *     '/books': BooksRoute,\n *     '*': NotFoundRoute\n * }\n * ````\n */\nexport let routes = {}\n\n/**\n * Optional prefix for the routes in this router. This is useful for example in the case of nested routers.\n */\nexport let prefix = ''\n\n/**\n * If set to true, the router will restore scroll positions on back navigation\n * and scroll to top on forward navigation.\n */\nexport let restoreScrollState = false\n\n/**\n * Container for a route: path, component\n */\nclass RouteItem {\n    /**\n     * Initializes the object and creates a regular expression from the path, using regexparam.\n     *\n     * @param {string} path - Path to the route (must start with '/' or '*')\n     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped\n     */\n    constructor(path, component) {\n        if (!component || (typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true))) {\n            throw Error('Invalid component object')\n        }\n\n        // Path must be a regular or expression, or a string starting with '/' or '*'\n        if (!path || \n            (typeof path == 'string' && (path.length < 1 || (path.charAt(0) != '/' && path.charAt(0) != '*'))) ||\n            (typeof path == 'object' && !(path instanceof RegExp))\n        ) {\n            throw Error('Invalid value for \"path\" argument - strings must start with / or *')\n        }\n\n        const {pattern, keys} = parse(path)\n\n        this.path = path\n\n        // Check if the component is wrapped and we have conditions\n        if (typeof component == 'object' && component._sveltesparouter === true) {\n            this.component = component.component\n            this.conditions = component.conditions || []\n            this.userData = component.userData\n            this.props = component.props || {}\n        }\n        else {\n            // Convert the component to a function that returns a Promise, to normalize it\n            this.component = () => Promise.resolve(component)\n            this.conditions = []\n            this.props = {}\n        }\n\n        this._pattern = pattern\n        this._keys = keys\n    }\n\n    /**\n     * Checks if `path` matches the current route.\n     * If there's a match, will return the list of parameters from the URL (if any).\n     * In case of no match, the method will return `null`.\n     *\n     * @param {string} path - Path to test\n     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.\n     */\n    match(path) {\n        // If there's a prefix, check if it matches the start of the path.\n        // If not, bail early, else remove it before we run the matching.\n        if (prefix) {\n            if (typeof prefix == 'string') {\n                if (path.startsWith(prefix)) {\n                    path = path.substr(prefix.length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n            else if (prefix instanceof RegExp) {\n                const match = path.match(prefix)\n                if (match && match[0]) {\n                    path = path.substr(match[0].length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n        }\n\n        // Check if the pattern matches\n        const matches = this._pattern.exec(path)\n        if (matches === null) {\n            return null\n        }\n\n        // If the input was a regular expression, this._keys would be false, so return matches as is\n        if (this._keys === false) {\n            return matches\n        }\n\n        const out = {}\n        let i = 0\n        while (i < this._keys.length) {\n            // In the match parameters, URL-decode all values\n            try {\n                out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null\n            }\n            catch (e) {\n                out[this._keys[i]] = null\n            }\n            i++\n        }\n        return out\n    }\n\n    /**\n     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events\n     * @typedef {Object} RouteDetail\n     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)\n     * @property {string} location - Location path\n     * @property {string} querystring - Querystring from the hash\n     * @property {object} [userData] - Custom data passed by the user\n     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)\n     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)\n     */\n\n    /**\n     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.\n     * \n     * @param {RouteDetail} detail - Route detail\n     * @returns {boolean} Returns true if all the conditions succeeded\n     */\n    async checkConditions(detail) {\n        for (let i = 0; i < this.conditions.length; i++) {\n            if (!(await this.conditions[i](detail))) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\n// Set up all routes\nconst routesList = []\nif (routes instanceof Map) {\n    // If it's a map, iterate on it right away\n    routes.forEach((route, path) => {\n        routesList.push(new RouteItem(path, route))\n    })\n}\nelse {\n    // We have an object, so iterate on its own properties\n    Object.keys(routes).forEach((path) => {\n        routesList.push(new RouteItem(path, routes[path]))\n    })\n}\n\n// Props for the component to render\nlet component = null\nlet componentParams = null\nlet props = {}\n\n// Event dispatcher from Svelte\nconst dispatch = createEventDispatcher()\n\n// Just like dispatch, but executes on the next iteration of the event loop\nasync function dispatchNextTick(name, detail) {\n    // Execute this code when the current call stack is complete\n    await tick()\n    dispatch(name, detail)\n}\n\n// If this is set, then that means we have popped into this var the state of our last scroll position\nlet previousScrollState = null\n\n// Update history.scrollRestoration depending on restoreScrollState\n$: history.scrollRestoration = restoreScrollState ? 'manual' : 'auto'\nlet popStateChanged = null\nif (restoreScrollState) {\n    popStateChanged = (event) => {\n        // If this event was from our history.replaceState, event.state will contain\n        // our scroll history. Otherwise, event.state will be null (like on forward\n        // navigation)\n        if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) {\n            previousScrollState = event.state\n        }\n        else {\n            previousScrollState = null\n        }\n    }\n    // This is removed in the destroy() invocation below\n    window.addEventListener('popstate', popStateChanged)\n\n    afterUpdate(() => {\n        restoreScroll(previousScrollState)\n    })\n}\n\n// Always have the latest value of loc\nlet lastLoc = null\n\n// Current object of the component loaded\nlet componentObj = null\n\n// Handle hash change events\n// Listen to changes in the $loc store and update the page\n// Do not use the $: syntax because it gets triggered by too many things\nconst unsubscribeLoc = loc.subscribe(async (newLoc) => {\n    lastLoc = newLoc\n\n    // Find a route matching the location\n    let i = 0\n    while (i < routesList.length) {\n        const match = routesList[i].match(newLoc.location)\n        if (!match) {\n            i++\n            continue\n        }\n\n        const detail = {\n            route: routesList[i].path,\n            location: newLoc.location,\n            querystring: newLoc.querystring,\n            userData: routesList[i].userData,\n            params: (match && typeof match == 'object' && Object.keys(match).length) ? match : null\n        }\n\n        // Check if the route can be loaded - if all conditions succeed\n        if (!(await routesList[i].checkConditions(detail))) {\n            // Don't display anything\n            component = null\n            componentObj = null\n            // Trigger an event to notify the user, then exit\n            dispatchNextTick('conditionsFailed', detail)\n            return\n        }\n\n        // Trigger an event to alert that we're loading the route\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoading', Object.assign({}, detail))\n\n        // If there's a component to show while we're loading the route, display it\n        const obj = routesList[i].component\n        // Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted\n        if (componentObj != obj) {\n            if (obj.loading) {\n                component = obj.loading\n                componentObj = obj\n                componentParams = obj.loadingParams\n                props = {}\n\n                // Trigger the routeLoaded event for the loading component\n                // Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)\n                dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n                    component: component,\n                    name: component.name,\n                    params: componentParams\n                }))\n            }\n            else {\n                component = null\n                componentObj = null\n            }\n\n            // Invoke the Promise\n            const loaded = await obj()\n\n            // Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile\n            if (newLoc != lastLoc) {\n                // Don't update the component, just exit\n                return\n            }\n\n            // If there is a \"default\" property, which is used by async routes, then pick that\n            component = (loaded && loaded.default) || loaded\n            componentObj = obj\n        }\n\n        // Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`\n        // Of course, this assumes that developers always add a \"params\" prop when they are expecting parameters\n        if (match && typeof match == 'object' && Object.keys(match).length) {\n            componentParams = match\n        }\n        else {\n            componentParams = null\n        }\n\n        // Set static props, if any\n        props = routesList[i].props\n\n        // Dispatch the routeLoaded event then exit\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n            component: component,\n            name: component.name,\n            params: componentParams\n        })).then(() => {\n            params.set(componentParams)\n        })\n        return\n    }\n\n    // If we're still here, there was no match, so show the empty component\n    component = null\n    componentObj = null\n    params.set(undefined)\n})\n\nonDestroy(() => {\n    unsubscribeLoc()\n    popStateChanged && window.removeEventListener('popstate', popStateChanged)\n})\n</script>\n","export function parse(str, loose) {\n\tif (str instanceof RegExp) return { keys:false, pattern:str };\n\tvar c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');\n\tarr[0] || arr.shift();\n\n\twhile (tmp = arr.shift()) {\n\t\tc = tmp[0];\n\t\tif (c === '*') {\n\t\t\tkeys.push('wild');\n\t\t\tpattern += '/(.*)';\n\t\t} else if (c === ':') {\n\t\t\to = tmp.indexOf('?', 1);\n\t\t\text = tmp.indexOf('.', 1);\n\t\t\tkeys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );\n\t\t\tpattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';\n\t\t\tif (!!~ext) pattern += (!!~o ? '?' : '') + '\\\\' + tmp.substring(ext);\n\t\t} else {\n\t\t\tpattern += '/' + tmp;\n\t\t}\n\t}\n\n\treturn {\n\t\tkeys: keys,\n\t\tpattern: new RegExp('^' + pattern + (loose ? '(?=$|\\/)' : '\\/?$'), 'i')\n\t};\n}\n\nvar RGX = /*#__PURE__*/ /(\\/|^)([:*][^/]*?)(\\?)?(?=[/.]|$)/g;\n\n// error if key missing?\nexport function inject(route, values) {\n\treturn route.replace(RGX, (x, lead, key, optional) => {\n\t\tx = values[key=='*' ? 'wild' : key.substring(1)];\n\t\treturn x ? '/'+x : (optional || key=='*') ? '' : '/' + key;\n\t});\n}\n","<script>\r\n</script>\r\n\r\n<h1>Welcome!</h1>","<script>\r\n    import { link } from \"svelte-spa-router\";\r\n</script>\r\n\r\n<h1>We are sorry!</h1>\r\n<p>The travel tips you are looking for do not exist.</p>\r\n<img src=\"https://picsum.photos/id/685/800/400\" alt=\"img\">\r\n<p>We still have other travel tips you might be interested in!</p>\r\n<a href=\"/\" use:link>\r\n    <h2>Take me home →</h2>\r\n</a>\r\n\r\n<style>\r\n    img {\r\n        width: 100%;\r\n    }\r\n</style>","export const CompareResult = {\r\n    eq: 1,\r\n    lt: 2,\r\n    gt: 3\r\n}\r\n\r\nexport function binarySearch(\r\n    list,\r\n    value,\r\n    compareFunc\r\n) {\r\n    let start = 0;\r\n    let end = list.length - 1;\r\n    let tempIndex = null;\r\n\r\n    while (start <= end) {\r\n        tempIndex = Math.floor((start + end) / 2);\r\n        const midValue = list[tempIndex];\r\n\r\n        const compareRes = compareFunc(midValue, value);\r\n        if (compareRes === CompareResult.eq) {\r\n            return tempIndex;\r\n        }\r\n\r\n        if (compareRes === CompareResult.lt) {\r\n            start = tempIndex + 1;\r\n        } else if (compareRes === CompareResult.gt) {\r\n            end = tempIndex - 1;\r\n        }\r\n    }\r\n\r\n    return tempIndex;\r\n}\r\n\r\n// 简体字符，用于随机生成内容\r\nconst str = \"一丁七万丈三上下不与丐丑专且丕世丘丙业丛东丝丞丢两严丧个丫中丰串临丸丹为主丽举乂乃久么义之乌乍乎乏乐乒乓乔乖乘乙乜九乞也习乡书乩买乱乳乾了予争事二亍于亏云互亓五井亘亚些亟亡亢交亥亦产亨亩享京亭亮亲亳亵亶亸人亿什仁仂仃仄仅仆仇仉今介仍从仑仓仔仕他仗付仙仞仟仡代令以仨仪仫们仰仲仳仵件价任份仿企伉伊伋伍伎伏伐休众优伙会伛伞伟传伢伤伥伦伧伪伫伯估伴伶伸伺似伽伾佃但位低住佐佑体何佗佘余佚佛作佝佞佟你佣佤佥佩佬佯佰佳佴佶佻佼佾使侃侄侈侉例侍侏侑侔侗供依侠侣侥侦侧侨侩侪侬侮侯侵便促俄俅俊俎俏俐俑俗俘俚俜保俞俟信俣俦俨俩俪俭修俯俱俳俵俶俸俺俾倌倍倏倒倓倔倘候倚倜倞借倡倥倦倨倩倪倬倭债倻值倾偃假偈偌偎偏偕做停健偬\"\r\n\r\nexport function getContent() {\r\n    return str.substring(Math.random() * 50, Math.random() * 100)\r\n}","<script>\r\n    import {binarySearch, CompareResult} from \"./utils.js\";\r\n    import {onMount, afterUpdate} from \"svelte\";\r\n\r\n    let scrollingEle\r\n    let phantomEle\r\n    let actualEle\r\n    let scrollTop\r\n\r\n    export let height\r\n    export let total\r\n    export let estimateRowHeight\r\n    export let bufferSize = 5\r\n    export let rowRenderer\r\n\r\n    const obj = {\r\n        height,\r\n        total,\r\n        estimateRowHeight,\r\n        // 列表总高度\r\n        phantomHeight: estimateRowHeight * total\r\n    }\r\n\r\n    // 可视范围内展示元素数\r\n    let limit = Math.ceil(obj.height / obj.estimateRowHeight);\r\n    // 记录当前的真实开始下标\r\n    let originStartIdx = 0;\r\n    // 数据（含缓冲数据）的头部下标\r\n    let startIndex = 0;\r\n    // 数据（含缓冲数据）的尾部下标\r\n    let endIndex = Math.min(\r\n        originStartIdx + limit + bufferSize,\r\n        obj.total -= 1\r\n    );\r\n\r\n    // handle dynamic inner content height\r\n    let cachedPositions = [];\r\n\r\n    onMount(() => {\r\n        if (actualEle && obj.total > 0) {\r\n            updateCachedPositions();\r\n        }\r\n    })\r\n\r\n    afterUpdate(() => {\r\n        updateList()\r\n    })\r\n\r\n    function updateList() {\r\n        if (obj.total !== total) {\r\n            obj.total = total;\r\n            resetAllVirtualParam();\r\n            return;\r\n        }\r\n\r\n        if (actualEle && obj.total > 0) {\r\n            updateCachedPositions();\r\n        }\r\n    }\r\n\r\n    function initCachedPositions() {\r\n        const {total, estimateRowHeight} = obj;\r\n        cachedPositions = [];\r\n        for (let i = 0; i < total; ++i) {\r\n            cachedPositions[i] = {\r\n                index: i,\r\n                height: estimateRowHeight,\r\n                top: i * estimateRowHeight,\r\n                bottom: (i + 1) * estimateRowHeight,\r\n                dValue: 0\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update cached positions when componentDidMount Triggered...\r\n     */\r\n    function updateCachedPositions() {\r\n        // update cached item height\r\n        const nodes = actualEle.childNodes;\r\n        const start = nodes[0];\r\n\r\n        // calculate height diff for each visible node...\r\n        nodes.forEach((node) => {\r\n            if (!node) {\r\n                // scroll too fast?...\r\n                return;\r\n            }\r\n            const rect = node.getBoundingClientRect();\r\n            const {height} = rect;\r\n            const index = Number(node.id.split(\"-\")[1]);\r\n            const oldHeight = cachedPositions[index].height;\r\n            const dValue = oldHeight - height;\r\n\r\n            if (dValue) {\r\n                cachedPositions[index].bottom -= dValue;\r\n                cachedPositions[index].height = height;\r\n                cachedPositions[index].dValue = dValue;\r\n            }\r\n        });\r\n\r\n        // perform one time height update...\r\n        let startIdx = 0;\r\n        if (start) {\r\n            startIdx = Number(start.id.split(\"-\")[1]);\r\n        }\r\n        const cachedPositionsLen = cachedPositions.length;\r\n        let cumulativeDiffHeight = cachedPositions[startIdx].dValue;\r\n        cachedPositions[startIdx].dValue = 0;\r\n\r\n        for (let i = startIdx + 1; i < cachedPositionsLen; ++i) {\r\n            const item = cachedPositions[i];\r\n            // update height\r\n            cachedPositions[i].top = cachedPositions[i - 1].bottom;\r\n            cachedPositions[i].bottom =\r\n                cachedPositions[i].bottom - cumulativeDiffHeight;\r\n\r\n            if (item.dValue !== 0) {\r\n                cumulativeDiffHeight += item.dValue;\r\n                item.dValue = 0;\r\n            }\r\n        }\r\n\r\n        // update our phantom div height\r\n        obj.phantomHeight = cachedPositions[cachedPositionsLen - 1].bottom;\r\n    }\r\n\r\n    function getStartIndex(sTop = 0) {\r\n        let idx = binarySearch(\r\n            cachedPositions,\r\n            sTop,\r\n            (currentValue, targetValue) => {\r\n                const currentCompareValue = currentValue.bottom;\r\n                if (currentCompareValue === targetValue) {\r\n                    return CompareResult.eq;\r\n                }\r\n\r\n                if (currentCompareValue < targetValue) {\r\n                    return CompareResult.lt;\r\n                }\r\n\r\n                return CompareResult.gt;\r\n            }\r\n        );\r\n\r\n        const targetItem = cachedPositions[idx];\r\n\r\n        // In case of binarySearch give us a not visible data(an idx of current visible - 1)...\r\n        if (targetItem.bottom < sTop) {\r\n            idx += 1;\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * Rest all VList helper param when total changes\r\n     */\r\n    function resetAllVirtualParam() {\r\n        originStartIdx = 0;\r\n        startIndex = 0;\r\n        endIndex = Math.min(\r\n            originStartIdx + limit + bufferSize,\r\n            obj.total - 1\r\n        );\r\n        scrollingEle.scrollTop = 0;\r\n        initCachedPositions();\r\n\r\n        // rest phantom div height\r\n        obj.phantomHeight = obj.estimateRowHeight * obj.total;\r\n        scrollTop = 0\r\n    }\r\n\r\n    function onScroll(evt) {\r\n        if (evt.target === scrollingEle) {\r\n            const sEle = evt.target;\r\n\r\n            const currentStartIndex = getStartIndex(sEle.scrollTop);\r\n\r\n            if (currentStartIndex !== originStartIdx) {\r\n                // we need to update visualized data\r\n                originStartIdx = currentStartIndex;\r\n                startIndex = Math.max(originStartIdx - bufferSize, 0);\r\n                endIndex = Math.min(\r\n                    originStartIdx + limit + bufferSize,\r\n                    total - 1\r\n                );\r\n                scrollTop = sEle.scrollTop\r\n            }\r\n        }\r\n    }\r\n\r\n    initCachedPositions()\r\n</script>\r\n\r\n<div bind:this={scrollingEle}\r\n     on:scroll={onScroll}\r\n     class=\"box\"\r\n     style={`height: ${obj.height}px`}\r\n>\r\n    <div bind:this={phantomEle}\r\n         class=\"phantom\"\r\n         style={`height: ${obj.phantomHeight}px`}\r\n    ></div>\r\n    <div class=\"actual\"\r\n         style={`transform: translate3d(0,${startIndex >= 1? cachedPositions[startIndex].bottom: 0}px,0)`}\r\n         bind:this={actualEle}\r\n    >\r\n        {#each Array(Math.max(endIndex - startIndex, 0)).fill(0).reduce((pre, next, idx) => {\r\n            pre.push(rowRenderer(idx + startIndex + next))\r\n            return pre\r\n        }, []) as {id, value}}\r\n            <div class=\"itemClass\"\r\n                 id={`item-${id}`}\r\n            >\r\n                <span class=\"idClass\">\r\n                    Id - {id} Content:\r\n                </span>\r\n                <span class=\"valClass\">\r\n                    {value}\r\n                </span>\r\n            </div>\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .box {\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        position: relative;\r\n        max-width: 800px;\r\n        margin: auto;\r\n    }\r\n\r\n    .phantom {\r\n        position: relative;\r\n    }\r\n\r\n    .actual {\r\n        width: 100%;\r\n        position: absolute;\r\n        top: 0;\r\n    }\r\n\r\n    .itemClass {\r\n        padding: 20px;\r\n        border-bottom: 1px solid #000;\r\n        left: 0;\r\n        right: 0;\r\n    }\r\n\r\n    .idClass {\r\n        display: block;\r\n        color: rgba(0, 0, 0, 0.85);\r\n        font-weight: 500;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .valClass {\r\n        width: 100%;\r\n        color: rgba(0, 0, 0, 0.5);\r\n        font-size: 16px;\r\n    }\r\n</style>","<script>\r\n    import VList from \"./components/VList.svelte\";\r\n    import {getContent} from \"./components/utils.js\";\r\n\r\n    const dataLength = 100000;\r\n    const data = Array(dataLength).fill(1).map((item, idx) => ({\r\n        id: item + idx,\r\n        value: getContent()\r\n    }));\r\n\r\n    const userVisibleHeight = (document.documentElement.clientHeight || 931) - 66;\r\n    const estimateRowHeight = 81;\r\n    const bufferSize = 8;\r\n\r\n    function rowRender(index) {\r\n        return data[index]\r\n    }\r\n</script>\r\n\r\n<VList height={userVisibleHeight}\r\n       total={dataLength}\r\n       estimateRowHeight={estimateRowHeight}\r\n       bufferSize={bufferSize}\r\n       rowRenderer={rowRender}\r\n/>","<svelte:options immutable/>\r\n\r\n<script>\r\n    import { afterUpdate } from 'svelte';\r\n    import flash from './flash.js';\r\n\r\n    export let todo;\r\n\r\n    let div;\r\n\r\n    afterUpdate(() => {\r\n        flash(div);\r\n    });\r\n</script>\r\n\r\n<style>\r\n    div {\r\n        cursor: pointer;\r\n        line-height: 1.5;\r\n    }\r\n</style>\r\n\r\n<div bind:this={div} on:click on:keyup>\r\n    {todo.done ? '👍': ''} {todo.text}\r\n</div>","export default function flash(element) {\r\n    requestAnimationFrame(() => {\r\n        element.style.transition = 'none';\r\n        element.style.color = 'rgba(255,62,0,1)';\r\n        element.style.backgroundColor = 'rgba(255,62,0,0.2)';\r\n\r\n        setTimeout(() => {\r\n            element.style.transition = 'color 1s, background 1s';\r\n            element.style.color = '';\r\n            element.style.backgroundColor = '';\r\n        });\r\n    });\r\n}","<svelte:options immutable/>\r\n\r\n<script>\r\n    import {onMount} from \"svelte\";\r\n    import ImmutableTodo from './component/ImmutableTodo.svelte';\r\n\r\n    let todos = [];\r\n\r\n    function toggle(id) {\r\n        todos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                // return a new object\r\n                return {\r\n                    id,\r\n                    done: !todo.done,\r\n                    text: todo.text\r\n                };\r\n            }\r\n\r\n            // return the same object\r\n            return todo;\r\n        });\r\n    }\r\n\r\n    onMount(() =>{\r\n        const total = 100000\r\n        // 一次插入 20 条，如果觉得性能不好就减少\r\n        const once = 20\r\n        // 渲染数据总共需要几次\r\n        const loopCount = total / once\r\n        let countOfRender = 0\r\n        function add() {\r\n            const arr = []\r\n            for (let i = 0; i < once; i++) {\r\n                const li = document.createElement(\"li\");\r\n                li.innerText = Math.floor(Math.random() * total);\r\n                arr.push({\r\n                    id: countOfRender * once + i +1,\r\n                    done: false,\r\n                    text: Math.floor(Math.random() * total)\r\n                })\r\n            }\r\n            todos = todos.concat(arr)\r\n            countOfRender += 1;\r\n            loop();\r\n        }\r\n        function loop() {\r\n            if (countOfRender < loopCount) { // 递归终止条件\r\n                window.requestAnimationFrame(add);\r\n            }\r\n        }\r\n        loop();\r\n    })\r\n</script>\r\n\r\n<h2>数据分片（十万）</h2>\r\n{#each todos as todo}\r\n    <ImmutableTodo {todo} on:click=\"{() => toggle(todo.id)}\"/>\r\n{/each}","<script>\r\n    import {onMount} from \"svelte\";\r\n\r\n    const dirtyTextArr = ['日本人', '日本鬼子', '日本男人']\r\n    console.log('敏感词个数 -> ', dirtyTextArr.length)\r\n    const dirtyRoot = new Map()\r\n    const buildMap = function (text) {\r\n        let dirtyMap = dirtyRoot\r\n        let origin = true\r\n        if (!text) { // 敏感词不能为空\r\n            return\r\n        }\r\n        for (let a = 0; a < text.length; a++) {\r\n            if (origin && dirtyMap.get(text[a])) {\r\n                // 当前字符已存在\r\n                if (dirtyMap.get(text[a]) === true) {\r\n                    // 已经存在更短的敏感词\r\n                    return;\r\n                }\r\n                let oldDirtyMap = dirtyMap\r\n                dirtyMap = dirtyMap.get(text[a])\r\n                // 当前字符是最后一个字, 将dirtyMap置为true\r\n                if (a === text.length - 1) {\r\n                    oldDirtyMap.set(text[a], true)\r\n                    // oldDirtyMap.\r\n                }\r\n            } else {\r\n                origin = false\r\n                if (a === text.length - 1) {\r\n                    // 最后一个字\r\n                    dirtyMap.set(text[a], true)\r\n                } else {\r\n                    // console.log(text[a])\r\n                    dirtyMap.set(text[a], new Map())\r\n                    dirtyMap = dirtyMap.get(text[a])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (let b = 0; b < dirtyTextArr.length; b++) {\r\n        buildMap(dirtyTextArr[b])\r\n    }\r\n\r\n    console.log('整理为map结构 -> ', dirtyRoot)\r\n\r\n    const dirtyCheckDFA = function (word){\r\n        if (!word || !dirtyRoot) {\r\n            return {dirty: false}\r\n        }\r\n        let dirty = false\r\n        let dirtyMap = dirtyRoot\r\n        let start = null\r\n        let end = 0\r\n        let origin = true\r\n        for (let i = 0; i < word.length; i++) {\r\n            // console.log(word[i])\r\n            const aMap = dirtyMap.get(word[i])\r\n            if (aMap) {\r\n                // 在敏感词中匹配到该字符，且该字符为最后一个字\r\n                if (aMap === true) {\r\n                    // 敏感词长度为1\r\n                    if (start === null) {\r\n                        start = i\r\n                    }\r\n                    end = i\r\n                    dirty = true\r\n                    break\r\n                } else {\r\n                    // 在敏感词中匹配到该字符，但不是结尾\r\n                    if (origin) {\r\n                        start = i\r\n                    }\r\n                    // console.log(aMap)\r\n                    dirtyMap = aMap\r\n                    origin = false\r\n                    if (i === word.length - 1) {\r\n                        i = start\r\n                        origin = true\r\n                        dirtyMap = dirtyRoot\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                if (!origin) {\r\n                    // 在树结构中途退出，重新从进入字符的下一个字符检查\r\n                    i = start\r\n                }\r\n                origin = true\r\n                start = null\r\n                dirtyMap = dirtyRoot\r\n            }\r\n        }\r\n        if (dirty) {\r\n            return { dirty: true, start, end}\r\n        }\r\n        return {dirty: false}\r\n    }\r\n\r\n    const dirtyCheckLoop  = function (word) {\r\n        if (!word) {\r\n            return {dirty: false}\r\n        }\r\n        for (let a = 0; a < dirtyTextArr.length; a++) {\r\n            const startIndex = word.indexOf(dirtyTextArr[a])\r\n            if (startIndex !== -1) {\r\n                return {dirty: true, start: startIndex, end: startIndex + dirtyTextArr[a].length - 1}\r\n            }\r\n        }\r\n        return {dirty: false}\r\n    }\r\n\r\n    function submit() {\r\n        console.log('**********************')\r\n        const text = document.querySelector('#text').value\r\n        const textLength = text.length\r\n        // console.log('待检测字符串长度',)\r\n\r\n        console.time('dirtyCheckDFA')\r\n        const checkResult = JSON.stringify(dirtyCheckDFA(text))\r\n        console.timeEnd('dirtyCheckDFA')\r\n\r\n\r\n        console.time('dirtyCheckLoop')\r\n        const checkResult2 = JSON.stringify(dirtyCheckLoop(text))\r\n        console.timeEnd('dirtyCheckLoop')\r\n        document.querySelector('.output').innerHTML = `输入字符串长度:${textLength}<br>dirtyCheckDFA运行结果:${checkResult}<br>dirtyCheckLoop运行结果:${checkResult2}`\r\n    }\r\n\r\n    onMount(() => {\r\n        document.getElementById(\"button\")?.addEventListener('click', submit)\r\n    })\r\n</script>\r\n\r\n<textarea id=\"text\"></textarea>\r\n<div>\r\n    <button id=\"button\">提交</button>\r\n</div>\r\n\r\n<div class=\"output\"></div>","import Home from \"./components/Home.svelte\";\r\nimport NotFound from \"./components/NotFound.svelte\";\r\nimport VList from \"./src/Data/VirtualList/VirtualList.svelte\";\r\nimport Raf from \"./src/Data/Raf/Raf.svelte\";\r\nimport Keyword from \"./src/Scene/Keyword/index.svelte\";\r\n\r\nexport const routes = {\r\n    \"/\": Home,\r\n    // 技巧\r\n    \"/tool/VList\": VList,\r\n    \"/tool/Raf\": Raf,\r\n    // 场景\r\n    \"/scene/Keyword\": Keyword,\r\n    \"*\": NotFound\r\n};\r\n\r\nexport const sideMenus = [\r\n    {\r\n        path: \"/tool/VList\",\r\n        name: \"虚拟列表\"\r\n    },\r\n    {\r\n        path: \"/tool/Raf\",\r\n        name: \"数据分片\"\r\n    },\r\n    // {\r\n    //     path: \"/scene/Keyword\",\r\n    //     name: \"关键词屏蔽\"\r\n    // }\r\n]","<script>\r\n    import Router, {link} from \"svelte-spa-router\";\r\n    import {routes, sideMenus} from \"../routes.js\";\r\n\r\n    let currentPath\r\n    let isActive = false\r\n    getLocation()\r\n\r\n    function getLocation(path) {\r\n        currentPath = path || location.hash\r\n    }\r\n\r\n    function getElements() {\r\n        return {\r\n            layout: document.getElementById('layout'),\r\n            menu: document.getElementById('menu'),\r\n            menuLink: document.getElementById('menuLink')\r\n        };\r\n    }\r\n\r\n    function handleEvent(e) {\r\n        let elements = getElements();\r\n\r\n        if (e.target.id === elements.menuLink.id) {\r\n            isActive = true\r\n            e.preventDefault();\r\n        } else if (elements.menu.className.indexOf('active') !== -1) {\r\n            isActive = false\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"click\", handleEvent)\r\n</script>\r\n\r\n<div id=\"layout\" class={isActive ? \"active\" : \"\"}>\r\n    <!-- Menu toggle -->\r\n    <a href=\"#menu\" id=\"menuLink\" class={`menu-link ${isActive ? \"active\" : \"\"}`}>\r\n        <span></span>\r\n    </a>\r\n\r\n    <div id=\"menu\" class={isActive ? \"active\" : \"\"}>\r\n        <div class=\"pure-menu\">\r\n            <a class=\"pure-menu-heading\" href=\"/\" use:link on:click={getLocation}>\r\n                <h3>工具</h3>\r\n            </a>\r\n\r\n            <!--            <Router {routes}/>-->\r\n            <ul class=\"pure-menu-list\">\r\n                {#each sideMenus as sideMenu, i}\r\n                    <li class=\"pure-menu-item\">\r\n                        <a href={`#${sideMenu.path}`}\r\n                           on:click={() => getLocation(sideMenu.path)}\r\n                           class={`pure-menu-link ${currentPath === sideMenu.path ? \"menu-item-divided pure-menu-selected\" : \"\"}`}>\r\n                            {sideMenu.name}\r\n                        </a>\r\n                    </li>\r\n                {/each}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div id=\"main\">\r\n        <div class=\"content\">\r\n            <Router {routes}/>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    /*\r\n    Add transition to containers so they can push in and out.\r\n    */\r\n    #layout,\r\n    #menu,\r\n    .menu-link {\r\n        -webkit-transition: all 0.2s ease-out;\r\n        -moz-transition: all 0.2s ease-out;\r\n        -ms-transition: all 0.2s ease-out;\r\n        -o-transition: all 0.2s ease-out;\r\n        transition: all 0.2s ease-out;\r\n    }\r\n\r\n    /*\r\n    This is the parent `<div>` that contains the menu and the content area.\r\n    */\r\n    #layout {\r\n        position: relative;\r\n        left: 0;\r\n        padding-left: 0;\r\n    }\r\n\r\n    #layout.active #menu {\r\n        left: 200px;\r\n        width: 200px;\r\n    }\r\n\r\n    #layout.active .menu-link {\r\n        left: 200px;\r\n    }\r\n\r\n    /*\r\n    The content `<div>` is where all your content goes.\r\n    */\r\n    .content {\r\n        margin: 0 auto;\r\n        padding: 0 2em;\r\n        max-width: 1600px;\r\n        /* margin-bottom: 50px;*/\r\n        line-height: 1.6em;\r\n    }\r\n\r\n    /*\r\n    The `#menu` `<div>` is the parent `<div>` that contains the `.pure-menu` that\r\n    appears on the left side of the page.\r\n    */\r\n\r\n    #menu {\r\n        margin-left: -200px; /* \"#menu\" width */\r\n        width: 200px;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        z-index: 1000; /* so the menu or its navicon stays above all content */\r\n        background: #191818;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    /*\r\n    All anchors inside the menu should be styled like this.\r\n    */\r\n    #menu a {\r\n        color: #999;\r\n        border: none;\r\n        padding: 0.6em 0 0.6em 0.6em;\r\n    }\r\n\r\n    /*\r\n    Remove all background/borders, since we are applying them to #menu.\r\n    */\r\n    #menu .pure-menu,\r\n    #menu .pure-menu ul {\r\n        border: none;\r\n        background: transparent;\r\n    }\r\n\r\n    /*\r\n    Add that light border to separate items into groups.\r\n    */\r\n    #menu .pure-menu ul,\r\n    #menu .pure-menu .menu-item-divided {\r\n        border-top: 1px solid #333;\r\n    }\r\n\r\n    /*\r\n    Change color of the anchor links on hover/focus.\r\n    */\r\n    #menu .pure-menu li a:hover {\r\n        background: #565d64;\r\n    }\r\n\r\n    /*\r\n    This styles the selected menu item `<li>`.\r\n    */\r\n    #menu .pure-menu-selected {\r\n        background: #333333;\r\n    }\r\n\r\n    /*\r\n    This styles a link within a selected menu item `<li>`.\r\n    */\r\n    #menu .pure-menu-selected a {\r\n        color: #fff;\r\n    }\r\n\r\n    /*\r\n    This styles the menu heading.\r\n    */\r\n    #menu .pure-menu-heading {\r\n        font-size: 110%;\r\n        color: #fff;\r\n        margin: 0;\r\n        border-bottom: 1px solid #333333;\r\n    }\r\n\r\n    /* -- Dynamic Button For Responsive Menu -------------------------------------*/\r\n\r\n    /*\r\n    The button to open/close the Menu is custom-made and not part of Pure. Here's\r\n    how it works:\r\n    */\r\n\r\n    /*\r\n    `.menu-link` represents the responsive menu toggle that shows/hides on\r\n    small screens.\r\n    */\r\n    .menu-link {\r\n        position: fixed;\r\n        display: block; /* show this only on small screens */\r\n        top: 0;\r\n        left: 0; /* \"#menu width\" */\r\n        background: #000;\r\n        background: rgba(0, 0, 0, 0.7);\r\n        font-size: 10px; /* change this value to increase/decrease button size */\r\n        z-index: 10;\r\n        width: 2em;\r\n        height: auto;\r\n        padding: 2.1em 1.6em;\r\n    }\r\n\r\n    .menu-link:hover {\r\n        background: #000;\r\n    }\r\n\r\n    .menu-link span {\r\n        position: relative;\r\n        display: block;\r\n    }\r\n\r\n    .menu-link span,\r\n    .menu-link span:before,\r\n    .menu-link span:after {\r\n        background-color: #fff;\r\n        pointer-events: none;\r\n        width: 100%;\r\n        height: 0.2em;\r\n    }\r\n\r\n    .menu-link span:before,\r\n    .menu-link span:after {\r\n        position: absolute;\r\n        margin-top: -0.6em;\r\n        content: \" \";\r\n    }\r\n\r\n    .menu-link span:after {\r\n        margin-top: 0.6em;\r\n    }\r\n\r\n\r\n    /* -- Responsive Styles (Media Queries) ------------------------------------- */\r\n\r\n    /*\r\n    Hides the menu at `48em`, but modify this based on your app's needs.\r\n    */\r\n    @media (min-width: 48em) {\r\n        .content {\r\n            padding-left: 2em;\r\n            padding-right: 2em;\r\n        }\r\n\r\n        #layout {\r\n            padding-left: 200px; /* left col width \"#menu\" */\r\n            left: 0;\r\n        }\r\n\r\n        #menu {\r\n            left: 200px;\r\n        }\r\n\r\n        .menu-link {\r\n            position: fixed;\r\n            left: 200px;\r\n            display: none;\r\n        }\r\n\r\n        #layout.active .menu-link {\r\n            left: 200px;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 48em) {\r\n        /* Only apply this when the window is small. Otherwise, the following\r\n        case results in extra padding on the left:\r\n            * Make the window small.\r\n            * Tap the menu to trigger the active state.\r\n            * Make the window large again.\r\n        */\r\n        #layout.active {\r\n            position: relative;\r\n            left: 200px;\r\n        }\r\n    }\r\n</style>","export function debounce(fn, wait) {\r\n    let timer = null;\r\n    return function () {\r\n        if (timer !== null) {\r\n            clearTimeout(timer);\r\n        }\r\n        timer = setTimeout(fn, wait);\r\n    }\r\n}\r\n\r\nexport function verifyLoginTime() {\r\n    const loginTime = localStorage.getItem(\"loginTime\")\r\n    const endTime = Date.parse(new Date())\r\n    return loginTime > endTime\r\n}","<script>\r\n    import {createEventDispatcher} from 'svelte';\r\n    import {debounce} from \"../../utility/utils.js\";\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    let pass = \"\"\r\n    let promise\r\n\r\n    async function login() {\r\n        const success = pass === \"111111\"\r\n        if (success) {\r\n            let dateTime = new Date();\r\n            dateTime = Date.parse(new Date(dateTime.setDate(dateTime.getDate() + 1)));\r\n            localStorage.setItem(\"loginTime\", dateTime)\r\n            dispatch('message');\r\n        }\r\n        return success\r\n    }\r\n\r\n    function handleClick() {\r\n        promise = debounce(login(), 500);\r\n    }\r\n</script>\r\n\r\n<div class=\"pure-form login\">\r\n    <h3 class=\"text-center\">請輸入訪問密碼</h3>\r\n    <fieldset>\r\n        <input bind:value={pass} type=\"text\" class=\"\" placeholder=\"Password\"/>\r\n    </fieldset>\r\n    <button type=\"submit\" class=\"summit pure-button pure-button-primary\" on:click={handleClick}>\r\n        提交\r\n    </button>\r\n    {#await promise}\r\n        <p>...waiting</p>\r\n    {:then res}\r\n        <p style=\"color: red\">{res === false ? \"登録失敗！\" : \"\"}</p>\r\n    {:catch error}\r\n        <p style=\"color: red\">拒絶訪問！</p>\r\n    {/await}\r\n</div>\r\n\r\n<style>\r\n    .login {\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        border: 1px solid #cccccc;\r\n        border-radius: 5px;\r\n        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, .1);\r\n        padding: 1rem;\r\n    }\r\n\r\n    .summit {\r\n        width: 100%\r\n    }\r\n</style>","<script>\r\n    import Layout from \"../Layout/Layout.svelte\";\r\n    import Login from \"./pages/Login.svelte\";\r\n    import {verifyLoginTime} from \"../utility/utils.js\";\r\n\r\n    let hasLogin = verifyLoginTime()\r\n\r\n    function handleMessage() {\r\n        hasLogin = verifyLoginTime();\r\n    }\r\n</script>\r\n\r\n<main>\r\n    {#if hasLogin}\r\n        <Layout on:message={handleMessage}/>\r\n    {:else}\r\n        <Login on:message={handleMessage}/>\r\n    {/if}\r\n</main>\r\n\r\n<style>\r\n    :global(body) {\r\n        margin: 0;\r\n        padding: 20px;\r\n        background: #fafafa;\r\n    }\r\n\r\n    :global(a) {\r\n        text-decoration: none;\r\n        color: #551a8b;\r\n    }\r\n\r\n    main {\r\n        margin: 0 auto;\r\n        font-family: \"Montserrat\", sans-serif;\r\n    }\r\n</style>","import App from './App.svelte';\r\n\r\nconst app = new App({\r\n\ttarget: document.body,\r\n\tprops: {\r\n\t\tname: 'Tool'\r\n\t}\r\n});\r\n\r\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","not_equal","null_to_empty","value","action_destroyer","action_result","destroy","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","construct_svelte_component","component","props","set_current_component","get_current_component","Error","onMount","$$","on_mount","push","afterUpdate","after_update","createEventDispatcher","type","detail","cancelable","callbacks","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","defaultPrevented","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","seen_callbacks","Set","flushidx","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","handle_promise","promise","info","token","index","resolved","child_ctx","undefined","current","needs_flush","blocks","m","mount","error","catch","hasCatch","pending","get_spread_update","levels","updates","to_null_out","accounted_for","$$scope","n","get_spread_object","spread_props","create_component","mount_component","customElement","new_on_destroy","map","filter","on_destroy","destroy_component","filtered","targets","indexOf","flush_render_callbacks","init","instance","create_fragment","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","splice","$set","$$props","obj","$$set","keys","subscriber_queue","readable","start","subscribe","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","derived","stores","initial_value","single","isArray","stores_array","auto","started","values","cleanup","sync","result","unsubscribers","store","unsub","unsubscribe","switch_instance_spread_levels","params","getLocation","hashPosition","window","location","href","substr","qsPosition","querystring","loc","$loc","link","opts","linkOpts","tagName","toLowerCase","updateLink","updated","charAt","preventDefault","disabled","history","replaceState","state","__svelte_spa_router_scrollX","scrollX","__svelte_spa_router_scrollY","scrollY","hash","scrollstateHistoryHandler","currentTarget","val","routes","prefix","restoreScrollState","RouteItem","constructor","path","_sveltesparouter","RegExp","pattern","str","loose","tmp","ext","arr","split","shift","substring","parse","conditions","userData","_pattern","_keys","match","startsWith","matches","exec","out","decodeURIComponent","checkConditions","routesList","route","componentParams","dispatch","dispatchNextTick","previousScrollState","popStateChanged","scrollTo","lastLoc","componentObj","unsubscribeLoc","newLoc","$$invalidate","loading","loadingParams","loaded","default","scrollRestoration","h1","element_src","url","p0","img","p1","CompareResult","eq","lt","gt","div","span0","span1","t1","t1_value","t4","t4_value","each_value","Math","max","reduce","div0","div0_style_value","phantomHeight","div1","div1_style_value","bottom","div2","div2_style_value","height","scrollingEle","phantomEle","actualEle","total","estimateRowHeight","bufferSize","rowRenderer","limit","ceil","originStartIdx","startIndex","endIndex","min","cachedPositions","initCachedPositions","top","dValue","updateCachedPositions","rect","getBoundingClientRect","Number","id","startIdx","cachedPositionsLen","cumulativeDiffHeight","item","getStartIndex","sTop","idx","list","compareFunc","end","tempIndex","floor","compareRes","binarySearch","currentValue","targetValue","currentCompareValue","scrollTop","updateList","evt","sEle","currentStartIndex","$$value","pre","next","dataLength","random","documentElement","clientHeight","t0_value","done","t2_value","div_1","t0","t2","todo","requestAnimationFrame","transition","color","backgroundColor","setTimeout","flash","h2","each_blocks","todos","toggle","once","loopCount","countOfRender","innerText","concat","loop","textarea","dirtyTextArr","console","log","dirtyRoot","buildMap","dirtyMap","origin","get","oldDirtyMap","submit","querySelector","textLength","time","checkResult","JSON","stringify","word","aMap","dirtyCheckDFA","timeEnd","checkResult2","dirtyCheckLoop","innerHTML","getElementById","sideMenus","li","div4","a0","span","a1","ul","div3","currentPath","isActive","elements","layout","menu","menuLink","className","sideMenu","verifyLoginTime","localStorage","getItem","Date","t_value","t","h3","fieldset","button","promise_1","pass","wait","timer","clearTimeout","debounce","success","dateTime","setDate","getDate","setItem","login","main","hasLogin","body"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}